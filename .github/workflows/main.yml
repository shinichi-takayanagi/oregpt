name: ci

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu, macOS, Windows]
        python-version: ["3.10", "3.11"]
        include:
          - os: Ubuntu
            image: ubuntu-22.04
          - os: Windows
            image: windows-2022
          - os: macOS
            image: macos-12
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'Windows' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Enable long paths for git on Windows
        if: ${{ matrix.os == 'Windows' }}
        run: git config --system core.longpaths true

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Check lock file
        run: poetry lock --check

      - name: Install dependencies
        run: poetry install

      - name: Remove unused variables/imports
        run: poetry run poetry run autoflake --remove-unused-variables --remove-all-unused-imports -r -c .

      - name: isort
        run: poetry run isort . --check-only

      - name: Run mypy
        run: poetry run mypy . --explicit-package-bases

      - name: Run pytest
        run: poetry run pytest -vv
